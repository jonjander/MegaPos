@if (model != null)
{
<Modal @ref="modalRef">
    <ModalContent IsCentered="true">
        <ModalHeader>
            <ModalTitle>Add new product</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Name</FieldLabel>
                <TextEdit Placeholder="Name"
                          @bind-Text="model.Name" />
            </Field>
            <Field>
                <FieldLabel>Price</FieldLabel>
                <NumericEdit @bind-Value=model.Price
                             TValue="float"
                             Attributes="@(new Dictionary<string, object> { { "inputmode", "decimal" } })"
                             DecimalsSeparator=","
                             Decimals="2"
                             Min="1"
                             Max="50000"
                             Placeholder="Price" />
            </Field>
            <Field>
                <FieldLabel>Quantity</FieldLabel>
                <NumericEdit @bind-Value=model.Quantity
                             TValue="int"
                             Min="1"
                             Max="10000"
                             Placeholder="Quantity" />
            </Field>
            <Field>
                <FieldLabel>Local profit</FieldLabel>
                <Slider TValue="float"
                        @bind-Value="@model._LocalProfit"
                        Min="1f"
                        Max="1000f" />
                <p>@(model.LocalProfit * 100f)%</p>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@Close">Close</Button>
            <Button Color="Color.Primary" Clicked="@AddProduct">Add product</Button>
        </ModalFooter>
    </ModalContent>
</Modal>
}
@code{
    [Parameter] public EventCallback<NewProductCommand> OnAddProduct { get; set; }
    [Parameter] public string StoreId { get; set; }

    private Modal modalRef;
    private NewProductCommand model;

    protected override void OnInitialized()
    {
        model = new NewProductCommand(StoreId);
    }

    public void ShowModal()
    {
        model = new NewProductCommand(StoreId);

        modalRef.Show();
    }

    public void Close()
    {
        modalRef.Hide();
    }

    public async Task AddProduct()
    {
        if (model.IsValid()) {
            await OnAddProduct.InvokeAsync(model);

            modalRef.Hide();
        }

    }
}
