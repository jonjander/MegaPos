<div class="product-card" style="border-color:@(Model?.Color ?? "#ffffff");">
    <div @onclick="BuyProduct" style="width:100%;" class="interact-btn">
        @if (Model.IsDisabled || Model.Quantity <= 0)
        {
            <h4 class="product-card-name"><del>@Model.Name</del></h4>
        }
        else
        {
            <h4 class="product-card-name">@Model.Name</h4>
        }
        <h5>@Model.Price.ToString("0.00") kr</h5>
        <p>Quantity : @Model.Quantity</p>
    </div>
    <Button Clicked="@Edit"><Icon Name="IconName.Edit" /></Button>
</div>
@code {
    [Parameter]public ProductVm Model { get; set; }
    [Parameter]public EventCallback<ProductVm> OnBuyProduct { get; set; }
    [Parameter]public EventCallback<ProductVm> OnPoductChanged { get; set; }
    [Inject] public PosState posState { get; set; }

    private async Task BuyProduct()
    {
        if (Model.Quantity > 0)
        {
            await OnBuyProduct.InvokeAsync(Model);
        }
    }

    public async Task Edit()
    {
        await OnPoductChanged.InvokeAsync(Model);
    }

    public void Dispose()
    {
        posState.UpdateRow.Remove(Update);
    }

    protected override void OnInitialized()
    {
        posState.UpdateRow.Add(Update);
    }

    public async Task Update(IUpdateRow updated)
    {
        if (updated.ProductId == Model.ProductId)
        {
            if (updated is UpdateRowPrice)
            {
                var updatedprice = updated as UpdateRowPrice;
                Model.Price = updatedprice.NewPrice;
            } else if (updated is UpdateRowQuantity)
            {
                var u = updated as UpdateRowQuantity;
                Model.Quantity = u.Quantity;
            } else if (updated is UpdateRowName)
            {
                var updatedprice = updated as UpdateRowName;
                Model.Name = updatedprice.NewName;
            } else if (updated is UpdateRowColor)
            {
                var colorupdate = updated as UpdateRowColor;
                Model.Color = colorupdate.Color;
            }
            StateHasChanged();
        }

    }
}
